#include<stdio.h>
#include <stdlib.h> 
#include <errno.h> 
#include <string.h> 
#include <netdb.h> 
#include <sys/types.h> 
#include <netinet/in.h> 
#include <sys/socket.h> 

#define PORT 9484
#define MAXDATASIZE 1024

int sockfd;  
char present_dir[128];

void client();
void send_file_to_server(int);
void recv_file_from_server(char []);
void lls();
void lcd();
void lpwd();
void ls();
void cd();
void getfile(char []);
void putfile(char []);
void mgetfile(char []);
void mputfile(char []);
void mgetfilew(char []);
void mputfilew(char []);
void exit();
void clear();

int main(int argc, char *argv[])
{
	
	struct sockaddr_in their_addr; /* connector's address information */


	if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) 
	{
		perror("socket not found");
		exit(1);
	}
	//memset((char *)&their_addr, 0, sizeof(their_addr));
	their_addr.sin_family = AF_INET;      /* host byte order */
	their_addr.sin_port = htons(PORT);    /* short, network byte order */
	their_addr.sin_addr.s_addr = INADDR_ANY;
	bzero(&(their_addr.sin_zero), 8);     /* zero the rest of the struct */

printf("edsfcbdefv");
	if (connect(sockfd, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1) 
	{
		perror("can not connect");
		exit(1);
	}

	else
	{

		
		client();
		close(sockfd);
	}
       
	return 0;
}


void get_string( char *ad) //Gets a string i.e. get command of your choice
{ 
	printf("======================================================================================================================\n");
	printf("lls    : to lists content of client current directory \n");
	printf("lcd    : to change client current directory, usage: lcd dir_name \n");
	printf("lpwd   : to display path of client current directory \n");
	printf("ls     : to lists content of server current directory \n");
	printf("cd     : to change server current directory, usage: cd dir_name\n");
	printf("pwd    : to display path of server current directory \n");
	printf("gets   : to download file from server, file name specified, usage: gets file_name\n");
	printf("puts   : to upload file to server, file name specified, usage: puts file_name\n");
	printf("mgets  : to download multiple files from server, file name specified, usage: mgets file_name1,file_name2\n");
	printf("mputs  : to upload multiple files to server, file name specified, usage: mputs file_name1,file_name2\n");
	printf("mgetsw : to download multiple files of same tipe from server, usage: mgetsw *.text\n");
	printf("mputsw : to upload multiple files of same type to server, usage: mputs *.text\n");
	printf("exit   : to exit the connection \n");
	printf("clear  : to clear command window \n");
	printf("======================================================================================================================\n");

	printf(" enter your choice : ");			
	char c;
	int j;
	for(j=0;;j++)
	{
	  c=getchar();
	  *(ad+j)=c;
	  if (c=='\n')
		break;
 	}
	*(ad+j)='\0';
};


void client()
{
	FILE *output =popen("pwd", "r");
	if(!output)
	{
		printf(" permission denied ");
		return;
	}
	//getwd(present_dir);
	fscanf(output, "%[^\n]", present_dir);
	pclose(output);	
	
	while(1)
	{
		char message[128]="";
		char command[128]="";
		char argument[128]="";

		//printf(" Enter string :  " );
		get_string(message); // get command string : 
		char *command1=strtok(message, " ");
		char *argument1=strtok(NULL, ";");
	
		if(command1==NULL)
		{
			continue;
		}
		strcpy(command, command1);
		if(argument1!=NULL)
		{
			strcpy(argument, argument1);
		}
		printf("command = %s \n ", command);
		if(argument1!=NULL)
		{
			printf(" argument = %s \n ", argument);
		}
	
// Things to be done at client side ===========================================================================================
		if(!strcmp(command, "lls")) // get the content of client current directory
		{
			char x[128]="";
			strcat(x, "ls ");
			if(argument!=NULL)
			{
				strcat(x, argument);
			}
			system(x);
		}
			
		else if(!strcmp(command, "lcd")) // change client current directroy
		{
			if(strlen(argument)==0)
			{
				argument[0]='\0';
			}
			chdir(argument);
			getwd(present_dir);
			printf(" client current directory changed to : %s\n ", present_dir);
		}
		else if(!strcmp(command, "lpwd")) // get client current directory path 
		{
			getwd(present_dir);
			printf("client current directory present at : %s\n ", present_dir);
		}
		
// end =========================================================================================================================================

// start of ls command request to server =======================================================================================================
		else if(!strcmp(command, "ls")) // get the content of server current directory
		{
			int len =strlen(command);
			send(sockfd, &len, 4, 0);
			send(sockfd, command, len, 0);

			if(strlen(argument)==0)
			{
				len=0;
				send(sockfd, &len, 4, 0);
			}
			else
			{
				len = strlen(argument);
				send(sockfd, argument, len, 0);
			}
			int count;
			recv(sockfd, &count, 4, 0);
			// recieve contents of server current directory
			int bytes_to_read;
			int i=0;
			int t=(int)count/(MAXDATASIZE-1);
			if(count>0)
			{
				for(i-0;i<=t;i++)
				{
					char result[1024];
					int bytes_recv = recv(sockfd, &len, 4, 0);
					bytes_recv = recv(sockfd, result, len, 0);
					write(1, result, bytes_recv);
				}
			}
		}
// end ===========================================================================================================================================

// start of cd command : request to server ======================================================================================================
		else if(!strcmp(command, "cd")) // change server current directory
		{
			int len =strlen(command);
			send(sockfd, &len, 4, 0);
			send(sockfd, command, len, 0);
			if(strlen(argument)==0)
			{
				len = 0;
				send(sockfd, &len, 4, 0);
			}
			else
			{
				len=strlen(argument);
				send(sockfd, &len, 4, 0);
				send(sockfd, argument, len, 0);
			}

			char buf[MAXDATASIZE];
			int bytes_recv=recv(sockfd, &len, 4, 0);
			bytes_recv=recv(sockfd, buf, len, 0);
			write(1, buf, bytes_recv);
		}
	
// end ===========================================================================================================================================

// start of pwd command : server current directory path =========================================================================================
		else if(!strcmp(command, "pwd")) //get server current directory path
		{
			char buf[1204];
			int bytes_recv;
			int len;
			len = strlen(command);
			send(sockfd, &len, 4, 0);
			send(sockfd, command, len, 0);
			bytes_recv = recv(sockfd, &len, 4, 0);
			bytes_recv = recv(sockfd, buf, len, 0);
			write(1, buf, bytes_recv);
		}
	
// end ==========================================================================================================================================

// start of gets command : download files from server ============================================================================================
		else if(!strcmp(command, "gets"))
		{
			int len = strlen(command);
			send(sockfd, &len, 4, 0);
			send(sockfd, command, len, 0);
			if(strlen(argument)==0)
			{
				len=0;
				send(sockfd, &len, 4, 0);
				printf("please enter the file along with command\n Usage: gets [filename]\n");
				continue;
			}
			else
			{
				len =strlen(argument);
				send(sockfd, &len, 4, 0);
				send(sockfd, argument, len, 0);
			}
			// recieve file from server if it exists
			int err_no;
			char err_msg[128];
			recv(sockfd, &err_no, 4, 0);
			if(err_no==1)
			{
				recv(sockfd, &len, 4, 0);
				recv(sockfd, err_msg, len, 0);
				printf("%s\n", err_msg);
				continue;
			}
			
			FILE* fp = fopen(argument, "w");
			if(fp ==NULL)
			{
				printf(" file could not be opened for reading or writing..... check the permission of the frile which you want to access\n");
				err_no = 1;
				send(sockfd, &err_no, 4, 0);
				continue;
			}
			else
			{
				err_no=0;
				send(sockfd, &err_no, 4, 0);
			}
			
			int size_of_file;
			recv(sockfd, &size_of_file, 4, 0);
			printf("size of file we have received is : %d\n ", size_of_file);
			if(size_of_file>0)
			{
				int i=0;
				int t = (int)size_of_file/(MAXDATASIZE);
				for(i=0;i<=t;i++)
				{
					char result[1024];
					int bytes_recv = recv(sockfd, &len, 4, 0);
					bytes_recv=recv(sockfd, result, len, 0);
					fwrite(result, bytes_recv, 1, fp);
					write(1, result, bytes_recv);
				}
			}
			fclose(fp);
		}

		
// end ==========================================================================================================================================
	
// starts of puts command: upload file to server ================================================================================================

		else if(!strcmp(command, "puts"))
		{
			int err = 0;
			char err_msg[128];
			int len = strlen(command);
			send(sockfd, &len, 4, 0);
			send(sockfd, command, len, 0);
			if(strlen(argument)==0)
			{
				len=0;
				send(sockfd, &len, 4, 0);
				printf("please enter the file along with command\n Usage: gets [filename]\n");
				continue;
			}
			else
			{
				len =strlen(argument);
				send(sockfd, &len, 4, 0);
				send(sockfd, argument, len, 0);
			}

			FILE *fp=fopen(argument, "r");

			if(fp==NULL)
			{
				err=1;
				send(sockfd, &err, 4, 0);
				strcpy(err_msg, "file does not exists in the client present directory\n");
				len=strlen(err_msg);
				send(sockfd, &len, 4, 0);
				send(sockfd, err_msg, len, 0);
				continue;
			}
			else
			{
				err=0;
				send(sockfd, &err, 4, 0);
			}
			recv(sockfd, &err, 4, 0);
			if(err==1)
			{
				fclose(fp);
				continue;
			}

			int size_of_file=0;
			char x;
			while(fscanf(fp, "%c", &x)!=EOF)
			{
				size_of_file++;
			}
			rewind(fp);
			send(sockfd, &size_of_file, 4, 0);
			if(size_of_file>0)
			{
				char result[MAXDATASIZE], data[MAXDATASIZE];
				int bytes_to_read;
				int i=0;
				int j=0;
				int t= (int)size_of_file/(MAXDATASIZE);
				for(j=0; j<=t; j++)
				{
					bytes_to_read=size_of_file>(MAXDATASIZE)?(MAXDATASIZE):size_of_file;
					for(i=0; i<bytes_to_read; i++)
					{
						fscanf(fp, "%c", &result[i]);
					}
	
    					len = bytes_to_read;
					send(sockfd, &len, 4, 0);
					send(sockfd, result, len, 0);
	
					size_of_file = size_of_file - bytes_to_read;
				}
			}
			fclose(fp);  
		
			
		}

// end ==========================================================================================================================================

// start of mgets : download multiple files from server =========================================================================================

		else if(!strcmp(command, "mgets"))
		{

			char delims[]=",";
			char *result =NULL;
			result=strtok(argument, delims);

			while( result != NULL ) 
			{
				strcpy(argument,result);


				int len = strlen(command);
				send(sockfd, &len, 4, 0);
				send(sockfd, command, len, 0);

				if(strlen(argument)==0)
				{
					len=0;
					send(sockfd, &len, 4, 0);
					printf("please enter the file along with command\n Usage: gets [filename]\n");
					continue;
				}
				else
				{
					len =strlen(argument);
					send(sockfd, &len, 4, 0);
					send(sockfd, argument, len, 0);
				}
				// recieve file from server if it exists
				int err_no;
				char err_msg[128];
				recv(sockfd, &err_no, 4, 0);
				if(err_no==1)
				{
					recv(sockfd, &len, 4, 0);
					recv(sockfd, err_msg, len, 0);
					printf("%s\n", err_msg);
					continue;
				}
				
				FILE* fp = fopen(argument, "w");
				if(fp ==NULL)
				{
					printf(" file could not be opened for reading or writing..... check the permission of the frile which you want to access\n");
					err_no = 1;
					send(sockfd, &err_no, 4, 0);
					continue;
				}
				else
				{
					err_no=0;
					send(sockfd, &err_no, 4, 0);
				}
				
				int size_of_file;
				recv(sockfd, &size_of_file, 4, 0);
				printf("size of file we have received is : %d\n ", size_of_file);
				if(size_of_file>0)
				{
					int i=0;
					int t = (int)size_of_file/(MAXDATASIZE);
					for(i=0;i<=t;i++)
					{
						char result[1024];
						int bytes_recv = recv(sockfd, &len, 4, 0);
						bytes_recv=recv(sockfd, result, len, 0);
						fwrite(result, bytes_recv, 1, fp);
						write(1, result, bytes_recv);
					}
				}
				fclose(fp);
	
		 		result = strtok( NULL, delims );
		 	}
		}

// end ==========================================================================================================================================

//	start of mputs: upload multiple files to server ==========================================================================================

		else if(!strcmp(command, "mputs"))
		{
			char delims[]=",";
			char *result =NULL;
			result=strtok(argument, delims);

			while( result != NULL ) 
			{
				strcpy(argument,result);

				int err = 0;
				char err_msg[128];
				int len = strlen(command);
				send(sockfd, &len, 4, 0);
				send(sockfd, command, len, 0);
				if(strlen(argument)==0)
				{
					len=0;
					send(sockfd, &len, 4, 0);
					printf("please enter the file along with command\n Usage: gets [filename]\n");
					continue;
				}
				else
				{
					len =strlen(argument);
					send(sockfd, &len, 4, 0);
					send(sockfd, argument, len, 0);
				}
	
				FILE *fp=fopen(argument, "r");
	
				if(fp==NULL)
				{
					err=1;
					send(sockfd, &err, 4, 0);
					strcpy(err_msg, "file does not exists in the client present directory\n");
					len=strlen(err_msg);
					send(sockfd, &len, 4, 0);
					send(sockfd, err_msg, len, 0);
					continue;
				}
				else
				{
					err=0;
					send(sockfd, &err, 4, 0);
				}
				recv(sockfd, &err, 4, 0);
				if(err==1)
				{
					fclose(fp);
					continue;
				}
	
				int size_of_file=0;
				char x;
				while(fscanf(fp, "%c", &x)!=EOF)
				{
					size_of_file++;
				}
				rewind(fp);
				send(sockfd, &size_of_file, 4, 0);
				if(size_of_file>0)
				{
					char result[MAXDATASIZE], data[MAXDATASIZE];
					int bytes_to_read;
					int i=0;
					int j=0;
					int t= (int)size_of_file/(MAXDATASIZE);
					for(j=0; j<=t; j++)
					{
						bytes_to_read=size_of_file>(MAXDATASIZE)?(MAXDATASIZE):size_of_file;
						for(i=0; i<bytes_to_read; i++)
						{
							fscanf(fp, "%c", &result[i]);
						}
		
    						len = bytes_to_read;
						send(sockfd, &len, 4, 0);
						send(sockfd, result, len, 0);
		
						size_of_file = size_of_file - bytes_to_read;
					}
				}
				fclose(fp);  
			
				result = strtok( NULL, delims );
		 	}
		}
// end ==========================================================================================================================================


// start of mgetsw command: client will download files of same type from server =================================================================

		else if(!strcmp(command, "mgetsw"))
		{

			//char delims[]=",";
			//char *result =NULL;
			//result=strtok(argument, delims);

			//while( result != NULL ) 
			//{
				//strcpy(argument,result);


				int len = strlen(command);
				send(sockfd, &len, 4, 0);
				send(sockfd, command, len, 0);

				if(strlen(argument)==0)
				{
					len=0;
					send(sockfd, &len, 4, 0);
					printf("please enter the file along with command\n Usage: gets [filename]\n");
					continue;
				}
				else
				{
					len =strlen(argument);
					send(sockfd, &len, 4, 0);
					send(sockfd, argument, len, 0);
				}
				// recieve file from server if it exists
				int err_no;
				char err_msg[128];
				recv(sockfd, &err_no, 4, 0);
				if(err_no==1)
				{
					recv(sockfd, &len, 4, 0);
					recv(sockfd, err_msg, len, 0);
					printf("%s\n", err_msg);
					continue;
				}
				
				FILE* fp = fopen(argument, "w");
				if(fp ==NULL)
				{
					printf(" file could not be opened for reading or writing..... check the permission of the frile which you want to access\n");
					err_no = 1;
					send(sockfd, &err_no, 4, 0);
					continue;
				}
				else
				{
					err_no=0;
					send(sockfd, &err_no, 4, 0);
				}
				
				int size_of_file;
				recv(sockfd, &size_of_file, 4, 0);
				printf("size of file we have received is : %d\n ", size_of_file);
				if(size_of_file>0)
				{
					int i=0;
					int t = (int)size_of_file/(MAXDATASIZE);
					for(i=0;i<=t;i++)
					{
						char result[1024];
						int bytes_recv = recv(sockfd, &len, 4, 0);
						bytes_recv=recv(sockfd, result, len, 0);
						fwrite(result, bytes_recv, 1, fp);
						write(1, result, bytes_recv);
					}
				}
				fclose(fp);
	
		 		//result = strtok( NULL, delims );
		 	//}
		}

// end ==========================================================================================================================================


// start of mputsw command : client will upload files of same ty to server ======================================================================

		else if(!strcmp(command, "mputsw"))
		{
			//char delims[]=",";
			//char *result =NULL;
			//result=strtok(argument, delims);

			//while( result != NULL ) 
			//{
			//	strcpy(argument,result);


				// listing strings of same type ================
			int size=0;
			FILE *in=NULL;
			char temp[256];
   
			in=popen("ls -a -l | wc -l", "r");
			fgets(temp, 255, in);
			size = atoi(temp)-1;

			char list[size][256];

			char comm[128]="ls ";
			strcat(comm,argument);


			in=popen(comm, "r"); //for reading
			//fgets(list[0], 255, in); // discard total: xxx, first line
  
			int k;
			for( k = 0; k < size; k++) 
			{
				fgets(list[k], 255, in);   
			}

			
			for(k=0; k < 10; k++) 
			{
				//printf("%s", list[k]);
			}

			for(k=0;k<10;k++)
			{
				int m;
				char result[128]="";
				m=strlen(list[k]);
				strncat(result,list[k],m-1);
				strcpy(argument,result);
				int n=strlen(argument);
				printf("%d\n",n);
				printf("%s\n",argument);

				int err = 0;
				char err_msg[128];
				int len = strlen(command);
				send(sockfd, &len, 4, 0);
				send(sockfd, command, len, 0);
				//printf("%s",argument);
				if(strlen(argument)==0)
				{
					len=0;
					send(sockfd, &len, 4, 0);
					printf("please enter the file along with command, Usage: gets [filename]\n");
					continue;
				}
				else
				{
					len =strlen(argument);
					printf("%d\n",len);
					send(sockfd, &len, 4, 0);
					send(sockfd, argument, len, 0);
				}
	
				FILE *fp=fopen(argument, "r");
	
				if(fp==NULL)
				{
					err=1;
					send(sockfd, &err, 4, 0);
					strcpy(err_msg, "file does not exists in the client present directory\n");
					len=strlen(err_msg);
					send(sockfd, &len, 4, 0);
					send(sockfd, err_msg, len, 0);
					continue;
				}
				else
				{
					err=0;
					send(sockfd, &err, 4, 0);
				}
				recv(sockfd, &err, 4, 0);
				if(err==1)
				{
					fclose(fp);
					continue;
				}
	
				int size_of_file=0;
				char x;
				while(fscanf(fp, "%c", &x)!=EOF)
				{
					size_of_file++;
				}
				rewind(fp);
				send(sockfd, &size_of_file, 4, 0);
				if(size_of_file>0)
				{
					char result[MAXDATASIZE], data[MAXDATASIZE];
					int bytes_to_read;
					int i=0;
					int j=0;
					int t= (int)size_of_file/(MAXDATASIZE);
					for(j=0; j<=t; j++)
					{
						bytes_to_read=size_of_file>(MAXDATASIZE)?(MAXDATASIZE):size_of_file;
						for(i=0; i<bytes_to_read; i++)
						{
							fscanf(fp, "%c", &result[i]);
						}
		
    						len = bytes_to_read;
						send(sockfd, &len, 4, 0);
						send(sockfd, result, len, 0);
		
						size_of_file = size_of_file - bytes_to_read;
					}
				}
				fclose(fp);  
			
				//result = strtok( NULL, delims );
		 	//}

			}
		}

// end ==========================================================================================================================================


// To exit the connection =======================================================================================	
		else if(!strcmp(command, "exit")) 
		{
			int bytes_recv;
			int len;
			len=strlen(command);
			bytes_recv=send(sockfd, &len, 4, 0);
			if(bytes_recv==-1)
			{
				perror("send");
			}
			bytes_recv=send(sockfd, command, len, 0);
			if(bytes_recv==-1)
			{
				perror("send");
			}
			break;
		}
// end =========================================================================================================
		
 // clear the command window ============================================
		else if(!strcmp(command, "clear"))
		{
			system("clear");
		}
//end ===================================================================
		
		else
		{
			printf(" command is not found please try again \n");
		}
	
	}

	printf(" Thank you the procedure is done \n ");
}

int get_message_from_server(char *variable, int fd, int size) // return the bytes which were received and if there is error return -1
{
	int bytes_recvd;
	bytes_recvd=recv(fd, variable, size, 0);
	return bytes_recvd;
}












































 


















